def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]

pipeline {
    agent any
    tools {
        maven "MAVEN3"
        jdk "JAVA1.8"
    }
    environment {
        registryCredential = 'ecr:ap-south-1:aws-creds'
        appRegistry = "436987258715.dkr.ecr.ap-south-1.amazonaws.com/vprofile-img"
        vprofileRegistry = "https://436987258715.dkr.ecr.ap-south-1.amazonaws.com"
    }
    stages {
        stage("Fetch code") {
            steps {
                git branch: "vp-docker" , url: "https://github.com/devopshydclub/vprofile-repo.git"
            }
        }

        stage("Unit Test") {
            steps {
                sh "mvn test"
            }
        }

        stage("Integration Test") {
            steps {
                sh "mvn verify -DskipUnitTests"
            }
        }

        stage("code analysis with checkstyle") {
            steps {
                sh "mvn checkstyle:checkstyle"
            }
        }

        stage("code analysis with sonar scanner") {
            environment {
                scanner= tool "sonarscanner4"
            }
            steps {
                withSonarQubeEnv('sonar-server') {
                sh '''${scanner}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile-repo \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        stage("Quality gate") {
            steps {
                timeout(time: 1, unit: 'HOURS'){
                    waitForQualityGate abortPipeline: true
                }
            }

        }
        stage("Build app image") {
            steps {
                script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-app/multistage" )
                }
            }
        }
        stage("Upload image on ecr") {
            steps {
                script{ 
                    docker.withRegistry( vprofileRegistry, registryCredential )
                    dockerImage.push("BUILD_NUMBER")
                    dockerImage.push('latest')
                }
            }
        }
    }
    post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#operations-team',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    } 
}